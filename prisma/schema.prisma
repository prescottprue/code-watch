// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  username     String   @unique
  passwordHash String?
  repos     Repo[]
  outdatedSnapshots OutdatedSnapshot[]
  coverageSnapshots CoverageSnapshot[]
}

model Repo {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String
  outdatedSnapshots OutdatedSnapshot[]
  coverageSnapshots CoverageSnapshot[]
}

model OutdatedSnapshot {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  repoId     String
  repo       Repo     @relation(fields: [repoId], references: [id])
  name       String?
  outdatedDependencies OutdatedDependency[]
  // outdated   Json // Array{ current, wanted, latest, dependent, location, name }
  // TODO: Store other stuff here like which API key called
}

model OutdatedDependency {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  snapshotId String
  snapshot   OutdatedSnapshot @relation(fields: [snapshotId], references: [id])
  current    String
  wanted     String
  latest     String
  dependent  String?
  // user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String
}

model CoverageSnapshot {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  repoId     String
  repo       Repo     @relation(fields: [repoId], references: [id])
  name       String?
  result     Json // Array{ current, wanted, latest, dependent, location, name }
  // TODO: Store other stuff here like which API key called
}