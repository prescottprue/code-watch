datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  role String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  githubUsername String @unique
  githubToken String?
  avatarUrl String?

  password Password?
  repos    Repo[]
  apiCredentials    ApiCredential[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model ApiCredential {
  id    String @id @default(cuid())
  name  String?
  // TODO: Encrypt this value before storing
  apiKey  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Repo {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  githubOwner String
  githubRepo String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  outdatedSnapshots OutdatedSnapshot[]
  coverageSnapshots CoverageSnapshot[]
}

model OutdatedSnapshot {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  repoId     String
  repo       Repo     @relation(fields: [repoId], references: [id])
  name       String?
  outdatedDependencies OutdatedDependency[]
  // outdated   Json // Array{ current, wanted, latest, dependent, location, name }
  // TODO: Store other stuff here like which API key called
}

model OutdatedDependency {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  snapshotId String
  snapshot   OutdatedSnapshot @relation(fields: [snapshotId], references: [id])
  current    String
  wanted     String
  latest     String
  dependent  String?
  name       String
}

model CoverageSnapshot {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  repoId     String
  repo       Repo     @relation(fields: [repoId], references: [id])
  name       String?
  result     Json? // Array{ current, wanted, latest, dependent, location, name }
  branch     String?
  coverageFilePath String
  // TODO: Store other stuff here like which API key called
}
